{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","onChange","e","target","value","type","className","placeholder","autoFocus","onClick","preventDefault","text","completed","id","Math","random","alert","name","Todo","todo","useState","updatedText","setUpdatedText","isUpdate","setIsUpdate","map","item","title","filter","TodoList","filteredTodos","App","status","setFilteredTodos","useEffect","getLocalTodos","saveTodosToLocalStorage","localStorage","setItem","JSON","stringify","getItem","localTodos","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e598e0a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault();\r\n    if (inputText) {\r\n      setTodos([\r\n        ...todos,\r\n        { text: inputText, completed: false, id: Math.random() * 1000 },\r\n      ]);\r\n    } else {\r\n      alert(\"Please enter a todo value\");\r\n    }\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        onChange={inputTextHandler}\r\n        type=\"text\"\r\n        className=\"todo-input\"\r\n        placeholder=\"Enter a todo\"\r\n        value={inputText}\r\n        autoFocus\r\n      />\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n  const [updatedText, setUpdatedText] = useState(\"\");\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n  const deleteHandler = () => {\r\n    setTodos(todos.filter((item) => item.id !== todo.id));\r\n  };\r\n\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  const updateDoneHandler = () => {\r\n    if (updatedText) {\r\n      setTodos(\r\n        todos.map((item) => {\r\n          if (item.id === todo.id) {\r\n            return {\r\n              ...item,\r\n              text: updatedText,\r\n            };\r\n          }\r\n          return item;\r\n        })\r\n      );\r\n      setUpdatedText(\"\");\r\n      setIsUpdate(!isUpdate);\r\n    } else {\r\n      alert(\"Please enter a todo value to update\");\r\n    }\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    setIsUpdate(!isUpdate);\r\n    setUpdatedText(text);\r\n  };\r\n\r\n  const updateInputHandler = (e) => {\r\n    setUpdatedText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      {isUpdate ? (\r\n        <>\r\n          <li className=\"update-todo-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"update-todo-input\"\r\n              value={updatedText}\r\n              onChange={updateInputHandler}\r\n              autoFocus\r\n            />\r\n          </li>\r\n          <button onClick={updateDoneHandler} className=\"update-done-btn\">\r\n            <i className=\"fas fa-check-double\"></i>\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <li\r\n            title={text}\r\n            className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}\r\n          >\r\n            {text}\r\n          </li>\r\n          <button onClick={completeHandler} className=\"complete-btn\">\r\n            <i className=\"fas fa-check\"></i>\r\n          </button>\r\n          <button onClick={updateHandler} className=\"update-btn\">\r\n            <i className=\"fas fa-edit\"></i>\r\n          </button>\r\n          <button onClick={deleteHandler} className=\"trash-btn\">\r\n            <i className=\"fas fa-trash\"></i>\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map((todo) => (\r\n          <Todo\r\n            todos={todos}\r\n            setTodos={setTodos}\r\n            todo={todo}\r\n            text={todo.text}\r\n            key={todo.id}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport TodoList from \"./components/TodoList\";\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getLocalTodos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    switch (status) {\r\n      case \"completed\":\r\n        setFilteredTodos(todos.filter((todo) => todo.completed));\r\n        break;\r\n      case \"uncompleted\":\r\n        setFilteredTodos(todos.filter((todo) => !todo.completed));\r\n        break;\r\n      default:\r\n        setFilteredTodos(todos);\r\n        break;\r\n    }\r\n    saveTodosToLocalStorage();\r\n  }, [todos, status]);\r\n\r\n  const saveTodosToLocalStorage = () => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  };\r\n\r\n  const getLocalTodos = () => {\r\n    if (localStorage.getItem(\"todos\") === null) {\r\n      localStorage.setItem(\"todos\", JSON.stringify([]));\r\n    } else {\r\n      const localTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n      setTodos(localTodos);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Yash's Todo List</h1>\r\n      </header>\r\n      <Form\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        inputText={inputText}\r\n        setInputText={setInputText}\r\n        setStatus={setStatus}\r\n      />\r\n      <TodoList\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        filteredTodos={filteredTodos}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}